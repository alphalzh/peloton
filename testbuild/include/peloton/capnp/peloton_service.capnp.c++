// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: peloton_service.capnp

#include "peloton_service.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<120> b_c1b3899137d6ac94 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148, 172, 214,  55, 145, 137, 179, 193,
     22,   0,   0,   0,   1,   0,   1,   0,
     68,   3,  63,  63, 136,  66, 211, 243,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 108, 111, 116, 111, 110,  95,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  67, 114,
    101,  97, 116, 101,  73, 110, 100, 101,
    120,  82, 101, 113, 117, 101, 115, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    196,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    200,   0,   0,   0,   3,   0,   1,   0,
    212,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,  98,  97, 115, 101,
     78,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,  97,  98, 108, 101,  78,  97, 109,
    101,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    107, 101, 121,  65, 116, 116, 114, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 100, 101, 120,  78,  97, 109,
    101,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 110, 105, 113, 117, 101,  75, 101,
    121, 115,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 100, 101, 120,  75, 101, 121,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c1b3899137d6ac94 = b_c1b3899137d6ac94.words;
#if !CAPNP_LITE
static const uint16_t m_c1b3899137d6ac94[] = {0, 5, 3, 2, 1, 4};
static const uint16_t i_c1b3899137d6ac94[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_c1b3899137d6ac94 = {
  0xc1b3899137d6ac94, b_c1b3899137d6ac94.words, 120, nullptr, m_c1b3899137d6ac94,
  0, 6, i_c1b3899137d6ac94, nullptr, nullptr, { &s_c1b3899137d6ac94, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_b8b254fb403078fc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    252, 120,  48,  64, 251,  84, 178, 184,
     22,   0,   0,   0,   1,   0,   0,   0,
     68,   3,  63,  63, 136,  66, 211, 243,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 108, 111, 116, 111, 110,  95,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  67, 114,
    101,  97, 116, 101,  73, 110, 100, 101,
    120,  82, 101, 115, 112, 111, 110, 115,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b8b254fb403078fc = b_b8b254fb403078fc.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b8b254fb403078fc = {
  0xb8b254fb403078fc, b_b8b254fb403078fc.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b8b254fb403078fc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_deab392c7b1da2c5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    197, 162,  29, 123,  44,  57, 171, 222,
     22,   0,   0,   0,   3,   0,   0,   0,
     68,   3,  63,  63, 136,  66, 211, 243,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 108, 111, 116, 111, 110,  95,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  80, 101,
    108, 111, 116, 111, 110,  83, 101, 114,
    118, 105,  99, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    210, 156, 235,   4,  80, 118, 186, 132,
    177, 154, 238, 152,  93,  58,  36, 175,
     17,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
     99, 114, 101,  97, 116, 101,  73, 110,
    100, 101, 120,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_deab392c7b1da2c5 = b_deab392c7b1da2c5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_deab392c7b1da2c5[] = {
  &s_84ba765004eb9cd2,
  &s_af243a5d98ee9ab1,
};
static const uint16_t m_deab392c7b1da2c5[] = {0};
const ::capnp::_::RawSchema s_deab392c7b1da2c5 = {
  0xdeab392c7b1da2c5, b_deab392c7b1da2c5.words, 31, d_deab392c7b1da2c5, m_deab392c7b1da2c5,
  2, 1, nullptr, nullptr, nullptr, { &s_deab392c7b1da2c5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_84ba765004eb9cd2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    210, 156, 235,   4,  80, 118, 186, 132,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 108, 111, 116, 111, 110,  95,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  80, 101,
    108, 111, 116, 111, 110,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 114, 101,
     97, 116, 101,  73, 110, 100, 101, 120,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    148, 172, 214,  55, 145, 137, 179, 193,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_84ba765004eb9cd2 = b_84ba765004eb9cd2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_84ba765004eb9cd2[] = {
  &s_c1b3899137d6ac94,
};
static const uint16_t m_84ba765004eb9cd2[] = {0};
static const uint16_t i_84ba765004eb9cd2[] = {0};
const ::capnp::_::RawSchema s_84ba765004eb9cd2 = {
  0x84ba765004eb9cd2, b_84ba765004eb9cd2.words, 35, d_84ba765004eb9cd2, m_84ba765004eb9cd2,
  1, 1, i_84ba765004eb9cd2, nullptr, nullptr, { &s_84ba765004eb9cd2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_af243a5d98ee9ab1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177, 154, 238, 152,  93,  58,  36, 175,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 108, 111, 116, 111, 110,  95,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  80, 101,
    108, 111, 116, 111, 110,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 114, 101,
     97, 116, 101,  73, 110, 100, 101, 120,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    252, 120,  48,  64, 251,  84, 178, 184,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_af243a5d98ee9ab1 = b_af243a5d98ee9ab1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_af243a5d98ee9ab1[] = {
  &s_b8b254fb403078fc,
};
static const uint16_t m_af243a5d98ee9ab1[] = {0};
static const uint16_t i_af243a5d98ee9ab1[] = {0};
const ::capnp::_::RawSchema s_af243a5d98ee9ab1 = {
  0xaf243a5d98ee9ab1, b_af243a5d98ee9ab1.words, 37, d_af243a5d98ee9ab1, m_af243a5d98ee9ab1,
  1, 1, i_af243a5d98ee9ab1, nullptr, nullptr, { &s_af243a5d98ee9ab1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// CreateIndexRequest
constexpr uint16_t CreateIndexRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t CreateIndexRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CreateIndexRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CreateIndexRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CreateIndexResponse
constexpr uint16_t CreateIndexResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t CreateIndexResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CreateIndexResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CreateIndexResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::PelotonService::CreateIndexParams,  ::PelotonService::CreateIndexResults>
PelotonService::Client::createIndexRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::PelotonService::CreateIndexParams,  ::PelotonService::CreateIndexResults>(
      0xdeab392c7b1da2c5ull, 0, sizeHint);
}
::kj::Promise<void> PelotonService::Server::createIndex(CreateIndexContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "peloton_service.capnp:PelotonService", "createIndex",
      0xdeab392c7b1da2c5ull, 0);
}
::kj::Promise<void> PelotonService::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xdeab392c7b1da2c5ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("peloton_service.capnp:PelotonService", interfaceId);
  }
}
::kj::Promise<void> PelotonService::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return createIndex(::capnp::Capability::Server::internalGetTypedContext<
           ::PelotonService::CreateIndexParams,  ::PelotonService::CreateIndexResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "peloton_service.capnp:PelotonService",
          0xdeab392c7b1da2c5ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// PelotonService
#if !CAPNP_LITE
constexpr ::capnp::Kind PelotonService::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PelotonService::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// PelotonService::CreateIndexParams
constexpr uint16_t PelotonService::CreateIndexParams::_capnpPrivate::dataWordSize;
constexpr uint16_t PelotonService::CreateIndexParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind PelotonService::CreateIndexParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PelotonService::CreateIndexParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// PelotonService::CreateIndexResults
constexpr uint16_t PelotonService::CreateIndexResults::_capnpPrivate::dataWordSize;
constexpr uint16_t PelotonService::CreateIndexResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind PelotonService::CreateIndexResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PelotonService::CreateIndexResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



